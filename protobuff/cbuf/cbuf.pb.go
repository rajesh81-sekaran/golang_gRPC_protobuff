// Code generated by protoc-gen-go.
// source: cbuf.proto
// DO NOT EDIT!

/*
Package cbuf is a generated protocol buffer package.

It is generated from these files:
	cbuf.proto

It has these top-level messages:
	Integer
	String
*/
package cbuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Integer struct {
	Integer int32 `protobuf:"varint,1,opt,name=integer" json:"integer,omitempty"`
}

func (m *Integer) Reset()                    { *m = Integer{} }
func (m *Integer) String() string            { return proto.CompactTextString(m) }
func (*Integer) ProtoMessage()               {}
func (*Integer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Integer) GetInteger() int32 {
	if m != nil {
		return m.Integer
	}
	return 0
}

type String struct {
	Str string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
}

func (m *String) Reset()                    { *m = String{} }
func (m *String) String() string            { return proto.CompactTextString(m) }
func (*String) ProtoMessage()               {}
func (*String) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *String) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func init() {
	proto.RegisterType((*Integer)(nil), "cbuf.Integer")
	proto.RegisterType((*String)(nil), "cbuf.String")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Conversion service

type ConversionClient interface {
	IntegerToString(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*String, error)
	StringToInteger(ctx context.Context, in *String, opts ...grpc.CallOption) (*Integer, error)
}

type conversionClient struct {
	cc *grpc.ClientConn
}

func NewConversionClient(cc *grpc.ClientConn) ConversionClient {
	return &conversionClient{cc}
}

func (c *conversionClient) IntegerToString(ctx context.Context, in *Integer, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := grpc.Invoke(ctx, "/cbuf.Conversion/IntegerToString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversionClient) StringToInteger(ctx context.Context, in *String, opts ...grpc.CallOption) (*Integer, error) {
	out := new(Integer)
	err := grpc.Invoke(ctx, "/cbuf.Conversion/StringToInteger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Conversion service

type ConversionServer interface {
	IntegerToString(context.Context, *Integer) (*String, error)
	StringToInteger(context.Context, *String) (*Integer, error)
}

func RegisterConversionServer(s *grpc.Server, srv ConversionServer) {
	s.RegisterService(&_Conversion_serviceDesc, srv)
}

func _Conversion_IntegerToString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversionServer).IntegerToString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbuf.Conversion/IntegerToString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversionServer).IntegerToString(ctx, req.(*Integer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversion_StringToInteger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversionServer).StringToInteger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cbuf.Conversion/StringToInteger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversionServer).StringToInteger(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

var _Conversion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cbuf.Conversion",
	HandlerType: (*ConversionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IntegerToString",
			Handler:    _Conversion_IntegerToString_Handler,
		},
		{
			MethodName: "StringToInteger",
			Handler:    _Conversion_StringToInteger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cbuf.proto",
}

func init() { proto.RegisterFile("cbuf.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4e, 0x2a, 0x4d,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb9, 0xd8, 0x3d, 0xf3,
	0x4a, 0x52, 0xd3, 0x53, 0x8b, 0x84, 0x24, 0xb8, 0xd8, 0x33, 0x21, 0x4c, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xd6, 0x20, 0x18, 0x57, 0x49, 0x8a, 0x8b, 0x2d, 0xb8, 0xa4, 0x28, 0x33, 0x2f, 0x5d, 0x48,
	0x80, 0x8b, 0xb9, 0xb8, 0x04, 0x22, 0xcf, 0x19, 0x04, 0x62, 0x1a, 0x15, 0x70, 0x71, 0x39, 0xe7,
	0xe7, 0x95, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7, 0x09, 0x19, 0x70, 0xf1, 0x43, 0x8d, 0x0b, 0xc9,
	0x87, 0x6a, 0xe1, 0xd5, 0x03, 0x5b, 0x0a, 0x15, 0x96, 0xe2, 0x81, 0x70, 0x21, 0x92, 0x4a, 0x0c,
	0x20, 0x1d, 0x10, 0x76, 0x48, 0x3e, 0xcc, 0x21, 0x28, 0x4a, 0xa4, 0x50, 0xf5, 0x2b, 0x31, 0x24,
	0xb1, 0x81, 0xdd, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x02, 0xda, 0x64, 0xcd, 0x00,
	0x00, 0x00,
}
